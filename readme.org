#+TITLE:Clyde Clock
#+AUTHOR: Johannes Rainer
#+email: johannes.rainer@i-med.ac.at
#+OPTIONS: ^:{}
#+PROPERTY: exports code
#+PROPERTY: session *R*
#+PROPERTY: noweb yes
#+PROPERTY: results output
#+PROPERTY: tangle yes
#+STARTUP: overview
#+INFOJS_OPT: view:t toc:t ltoc:t mouse:underline buttons:0 path:http://thomasf.github.io/solarized-css/org-info.min.js
#+HTML_HEAD: <link rel='stylesheet' type='text/css' href='http://thomasf.github.io/solarized-css/solarized-light.min.css' />
#+LATEX_HEADER: \usepackage[backend=bibtex,style=chem-rsc,hyperref=true]{biblatex}
#+LATEX_HEADER: \usepackage{parskip}
#+LATEX_HEADER: \usepackage{tabu}
#+LATEX_HEADER: \setlength{\textwidth}{17.0cm}
#+LATEX_HEADER: \setlength{\hoffset}{-2.5cm}
#+LATEX_HEADER: \setlength{\textheight}{22cm}
#+LATEX_HEADER: \setlength{\voffset}{-1.5cm}
#+LATEX_HEADER: \addbibresource{~/Documents/Unison/bib/references.bib}
# #+LATEX_HEADER: \usepackage{verbatim}
#+LATEX_HEADER: \usepackage{inconsolata}
#+LATEX_HEADER: \definecolor{lightgrey}{HTML}{F0F0F0}
#+LATEX_HEADER: \definecolor{solarizedlightbg}{HTML}{FCF4DC}
#+LATEX_HEADER: \makeatletter
# #+LATEX_HEADER: \def\verbatim@font{\scriptsize\ttfamily}
#+LATEX_HEADER: \makeatother
#+FILETAGS: :project:private:
-----

* Clyde Clock

** Requirements

# + The great =ClydeDev= library from RobotGrrl (https://github.com/RobotGrrl/ClydeDev.git).
+ The modified =ClydeDev= library (https://github.com/jotsetung/ClydeDev.git; original from RobotGrrl).
+ The =Streaming= (http://arduiniana.org/libraries/streaming/) library.
+ The =Time= (https://github.com/PaulStoffregen/Time.git) library.
+ The modified =TimeAlarms= (https://github.com/jotsetung/TimeAlarms.git) library (allows to call function =serviceAlarms= directly).
+ Remove the original =Clyde= library from the Arduino libraries folder.
+ Add all the libraries above to the Arduino libraries.

** Configurations<<Configurations>>

+ *!* Adapt =ClydeTouchyFeely(1)= and =ClydeAfraidDark(2)= in /ClydeClock.ino/ (lines 31 and 35, respectively) depending on where you installed the /TouchyFeely/ and the /Afraid of the dark/ modules.

+ Use one of the legs instead of the /eye/ to switch the lights on or off: setting the =leg_switch= variable to a value from 0-5 will cause the respective leg to be used as the /switch/. This is useful for Clydes with a buggy IR sensor in the eye.

+ Define custom sunset or sunrise colors and duration in /Basic.ino/'s =sunrise= and =sunset= functions.


** Usage and Notes

+ The touch sensor is reset each time the white light is either turned on or off. This causes a lag time of some seconds in which the touch sensor is unresponsive (which might be quite annoying if the legs are used as light switch).

** Functionality<<Functionality>>

+ Change the RGB light to a different color for each of Clyde's legs.

+ Use one of the legs as the light switch (instead of the eye; see [[Configurations]] section above).

+ If a microphone is available (as described in RobotGrrl's /ClydeDisco/ setup), use that to e.g. switch the lights (functionality defined in /Mike.ino/, function =listenForClaps=).

** Files and functions

+ /Afraid.ino/: process readouts from the light sensor (AfraidOfTheDark).

  - =checkForDarkness=: compares current and previous light intensities, and if they are below a certain threshold for a specified time it triggers the =sunset=.

+ /Basic.ino/: provides basic functions.

  - =void cycleThroughRGBColors()=: cycles through the colors defined by the global variable =step_colors= for the pre-defined durations (global variable =step_durations=). This function is intended to be called in the =update= function and requires global parameters to be set (e.g. /via/ =startRGBCycle=).

  - =void fadeWhiteLight()=: similar to the function above, allows to cycle the white light intensities through a pre-defined set of intensities (for pre-defined durations). This function is called by the =update= function, the intensity steps and durations can be defined with the function =startFadeWhiteLight=.

  - =void startRGBCycle( uint8_t s_colors[], uint32_t s_durations[], uint8_t no_steps )=: sets the colors and durations for the color cycle. =s_colors= should be an array with r,g,b values from 0 to 255, =s_durations= an array with the time (in ms) to reach the defined color (length of the array should thus be length of =*s_durations= / 3); =no_steps= should be the length of the =s_durations= array.

  - =void startFadeWhiteLight( uint8_t intens[], uint32_t durations[], uint8_t no_steps )=: same as above, just for the white light. Also, since only a single light intensity is defined instead of r, g and b values, the length of =intens= and =durations= have to match and have to be equal to =no_steps=.

  - =void stopCycle()=: just resets the cycle step for rgb and white light and thus exits any cycle.

  - =void sunrise()=: defines sunrise colors and starts an RGB cycle through these.

  - =void sunset()=: defines sunset colors and starts an RGB cycle through these.

  - =void switchLights()=: function to switch the white light and rgb light on and off.

+ /ClydeClock.ino/: the main file.

+ /Eye.ino/: functions related to the eye (handler functions).

+ /Mike.ino/: functions related to a connected microphone. This can be enables/disabled with the =#define ENABLE_MIKE= in /ClydeClock.ino/.

  - =void listenForClaps=: function to evaluate and count noise/sound peaks and start an action depending on the number of e.g. claps in a certain time span.

+ /Time.ino/: functions related to time and alarm clock. This can be enables/disabled with the =#define ENABLE_CLOCK= in /ClydeClock.ino/.

+ /TouchyFeely.ino/: contains the handler function to be called when one of Clyde's legs is touched.

  - =void clydeTouched(uint8_t l)=: the handler function called if a leg of Clyde is touched. The function will change the rgb light to a pre-defined color depending on which leg was touched. Also, if =leg_switch= is set to a value from 0 to 5, it calls the =switchLights= function (useful for those Clydes for which the eye does no longer work...).

  - =void clydeReleased(uint8_t l)=: the handler function called if a leg of Clyde is touched.

** TODOs							   :noexport:

*** TODO Write the =Time.ino= file.

- This should contain all time related stuff.

*** TODO Write the =Basic.ino= file [0/0].

- This should contain all basic and commonly used commands:
  - [X] a function to enable a timed color change similar to the sunset cycle of the original Clyde: =cycleThroughRGBColors=.
  - [ ] a similar function as above, just for HSI instead of RGB.
  - [ ] a function to fade the white light to a pre-defined intensity (in a pre-defined time period).

*** TODO Write the =ClydeClock.ino= file.

*** DONE Write the =Mike.ino= file
    CLOSED: [2014-10-27 Mon 19:29]
    - State "DONE"       from "TODO"       [2014-10-27 Mon 19:29]

Some functionality related to the microphone...

+ [X] Write a function that switches the light on and of with two claps.
+ [X] Check the functions that detect claps.


*** TODO Check functions:					   :noexport:

- [X] =cycleThroughRGBColors= and =startRGBCycle=.
- [X] =fadeWhiteLight= and =startFadeWhiteLight=.
- [X] =checkForSunset=: kind of OK; light intensities are however pretty low...

*** DONE Check the microphone functionality.
    CLOSED: [2014-10-27 Mon 19:29]
    - State "DONE"       from "TODO"       [2014-10-27 Mon 19:29]
